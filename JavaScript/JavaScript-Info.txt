Queries

A lot of shiny new features came out with ES2015 (ES6)

=======================================

reference Github
https://github.com/hiteshchoudhary/js-hindi-youtube


keywords let and var

The keywords let and var both declare new variables in JavaScript. The difference between let and var is in the scope of the variables they create:

Variables declared by let are only available inside the block where they’re defined.
Variables declared by var are available throughout the function in which they’re declared.

function varScoping() {
  var x = 1;

  if (true) {
    var x = 2;
    console.log(x); // will print 2
  }

  console.log(x); // will print 2
}

function letScoping() {
  let x = 1;

  if (true) {
    let x = 2;
    console.log(x); // will print 2
  }

  console.log(x); // will print 1
}

Note: Ideal way is to use let variable
--------------------------------------- 

Datatypes and ECMA standards

"use strict"; // treat all JS code as newer version

---------------------

Convert from string to number

 let score= "5"

 console.log(typeof(score));

 let valueInNumber = Number(score);
 console.log(typeof(valueInNumber));
 
---------------------------------

Number to Boolean conversion

let isLoggedIn = 1

let boolLoggedIn = Boolean(isLoggedIn)
console.log(boolLoggedIn);

---------------------------

Array in Javascript 

const myArr = [5,7,3,2,1];

console.log(myArr);
console.log(myArr.length);

myArr.push(6);
console.log(myArr);


Copy an array to another
const myArr = [5,7,3,2,1];

const newArr = ["hi","hello"];

//const resArr = [myArr, ...newArr];

const resArr = [...myArr];

myArr[0] =99;

console.log(myArr);
console.log(resArr);
console.log(resArr.length);

-----------------------
Read Json object

const user = {
    name: "Mahesh",
    "full name":"Mahesh Gunaje",
    age:18,
    location:"Blore",
    email:"abc@gmail.com"
}

console.log(user.name);
console.log(user["location"]);
console.log(user["full name"]);

---------------------------------
const myUser = {}

myUser.id="123"
myUser.name="mahesh"

console.log(myUser);

----------------------------
JSON

get sample json data
https://randomuser.me/

-----------------------------

Arrow Function

part of ES6 function

const testMethod = () => {
    console.log("hello");
}

testMethod();

---------------

const addMethod = (num1, num2) => {
    return num1 + num2;
}

const addNewMethod = (num1, num2) =>  (num1 ===3 ? 99: 100)

let res = addNewMethod(31,7);
console.log(res);

----------
const addNewMethod = (num1, num2) =>  "hello world"

let res = addNewMethod(31,7);
console.log(res);

--------------
const testMethod = (num1, num2) => ({username:"mahesh"})

console.log(testMethod(5,6));
----------------------------------
IIFE
Immediately Invoked Function Expressions IIFE

(function testMethod(){
    console.log("connect to DB");
})();

this will execute the function. this is named IIFE

wrapping the function, then call the function.

Just to avoid the global scope issues, this is used.


alternative way using arrow function
( () => {
    console.log("Hello World 123");
})();


( (name) => {
    console.log(`Hello World ${name}`);
})("Mahesh");

------------

For loop

for(let index=0; index <10; index ++){
    const element = index;
    console.log(element);
}

Array loops

const arr = [1,2,3,4,5]

for(const num of arr) {
    console.log(num);
}

----------
Hashamp

const map = new Map()

map.set("IN", "India")
map.set("USA", "United States")
map.set("FR", "France")
map.set("CN", "China")

for(const[key,value] of map) {
    console.log(key, '-', value);
}

------------------
Iterate json object

const user = {
    name: "Mahesh",
    "full name":"Mahesh Gunaje",
    age:18,
    location:"Blore",
    email:"abc@gmail.com"
}

for(const key in user) {
    console.log(`${key} its value is ${user[key]}`);
}

--------------------

Read json values from an array

const myCoding = [
    {
        langName: "javascript",
        langFileName: "js"
    },
    {
        langName: "Python",
        langFileName: "py"
    },
    {
        langName: "java",
        langFileName: "jav"
    },

]

myCoding.forEach( (item) => {
        console.log(item.langName);
})

--------------------------

Filter map and reduce in javascript

const myNums = [1,2,3,4,5,6,7,8,9,10]

const newNumbs = myNums.filter( (num) => num > 4)
console.log(newNumbs);

--------
https://github.com/hiteshchoudhary/js-hindi-youtube/blob/main/05_iterations/six.js

const books = [
    { title: 'Book One', genre: 'Fiction', publish: 1981, edition: 2004 },
    { title: 'Book Two', genre: 'Non-Fiction', publish: 1992, edition: 2008 },
    { title: 'Book Three', genre: 'History', publish: 1999, edition: 2007 },
    { title: 'Book Four', genre: 'Non-Fiction', publish: 1989, edition: 2010 },
    { title: 'Book Five', genre: 'Science', publish: 2009, edition: 2014 },
    { title: 'Book Six', genre: 'Fiction', publish: 1987, edition: 2010 },
    { title: 'Book Seven', genre: 'History', publish: 1986, edition: 1996 },
    { title: 'Book Eight', genre: 'Science', publish: 2011, edition: 2016 },
    { title: 'Book Nine', genre: 'Non-Fiction', publish: 1981, edition: 1989 },
  ];

  let userBooks = books.filter( (bk) => bk.genre === 'History')

  userBooks = books.filter( (bk) => { 
    return bk.publish >= 1995 && bk.genre === "History"
})
  console.log(userBooks);
  
------------------

use of map, filter

const myNumers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

// const newNums = myNumers.map( (num) => { return num + 10})

const newNums = myNumers
                .map((num) => num * 10 )
                .map( (num) => num + 1)
                .filter( (num) => num >= 40)

console.log(newNums);

-----------------------------

const shoppingCart = [
    {
        itemName: "js course",
        price: 2999
    },
    {
        itemName: "py course",
        price: 999
    },
    {
        itemName: "mobile dev course",
        price: 5999
    },
    {
        itemName: "data science course",
        price: 12999
    },
]

const priceToPay = shoppingCart.reduce((acc, item) => acc + item.price, 0)

console.log(priceToPay);

----------------------------------

DOM introduction in javascript 

https://github.com/hiteshchoudhary/js-hindi-youtube/tree/main/06_dom

Document Object Model

check for: console.log(window);

console.log(window.document); is same as console.log(document);

Main object/model:  window -> Document -> HTML -> html has 2 childs
1: HEAD -> title, meta.  title has text node. meta has attribute.
2: BODY -> div, h1, p, 

you can consider above as nodes.

------------
watch this video
https://www.youtube.com/watch?v=Ab6K57WjWTE&list=PLu71SKxNbfoBuX3f4EOACle2y-tRC5Q37&index=32

-------------------

